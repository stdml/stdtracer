#pragma once
#include <stdtracer.hpp>

extern simple_tracer_ctx_t default_simple_ctx;
extern log_tracer_ctx_t default_log_ctx;
// user should define the following
// simple_tracer_ctx_t default_simple_ctx("global");
// log_tracer_ctx_t default_log_ctx("global");
// or link with -lstdtracer

using tracer_t = multi_tracer_t;

#define TRACE_SCOPE(name)                                                      \
    tracer_t _((name), default_simple_ctx, default_log_ctx)

#define TRACE_STMT(e)                                                          \
    {                                                                          \
        tracer_t _(#e, default_simple_ctx, default_log_ctx);                   \
        e;                                                                     \
    }

#define TRACE_EXPR(e)                                                          \
    [&]() {                                                                    \
        tracer_t _(#e, default_simple_ctx, default_log_ctx);                   \
        return (e);                                                            \
    }()

#define SET_TRACE_LOG(name)                                                    \
    set_trace_log_t<log_tracer_ctx_t> ___((name), default_log_ctx)

template <bool enable = false, typename F, typename... Arg>
void trace_call(const std::string &name, F &f, Arg &... args)
{
    if (enable) {
        tracer_t _(name, default_simple_ctx, default_log_ctx);
        f(args...);
    } else {
        f(args...);
    }
}

template <typename... Args> void logf(const Args &... args)
{
    default_log_ctx.logf(args...);
}
